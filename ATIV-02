1. Escreva uma função que receba uma lista de números e retorne outra lista
com os números ímpares

def numeros_impares(list):
    impares = []
    for numero in list:
        if numero % 2 != 0:
            impares.append(numero)
    return impares

2. Escreva uma função que receba uma lista de números e retorne outra lista
com os números primos presentes.

def numprimo(numero):
    if numero < 2:
        return False
    for i in range(2, numero):
        if numero % i == 0:
            return False
    return True

def numeros_primos(lista):
    return [numero for numero in lista if eh_primo(numero)]

numeros = [2, 3, 4, 5, 6, 7, 8, 9, 10]
primos = numeros_primos(numeros)
print(primos)

3. Escreva uma função que receba duas listas e retorne outra lista com os
elementos que estão presentes em apenas uma das listas.

def elementos(lista1, lista2):
    unicos = []
    for elemento in lista1:
        if elemento not in lista2:
            unicos.append(elemento)
    for elemento in lista2:
        if elemento not in lista1:
            unicos.append(elemento)
    return unicos
#exemplo
lista1 = [1, 2, 3, 4]
lista2 = [3, 4, 5, 6]
resultado = elementos(lista1, lista2)
print(resultado)

4. Dada uma lista de números inteiros, escreva uma função para encontrar o
segundo maior valor na lista.

def segundo_maior(lista):
    maior = max(lista)
    lista.remove(maior)
    segundo_maior = max(lista)
    return segundo_maior

numeros = [10, 5, 20, 8, 20, 15]
resultado = segundo_maior(numeros)
print(resultado)

15

5. Crie uma função que receba uma lista de tuplas, cada uma contendo o
nome e a idade de uma pessoa, e retorne a lista ordenada pelo nome das
pessoas em ordem alfabética.

def ordem_alfabetica(lista):
    lista.sort()
    return lista

dados = [("Ana", 25), ("Jose", 30), ("Bianca", 22), ("Italo", 27)]
resultado = ordem_afabetica(dados)
print(resultado)

6. Observe os espaços sublinhados e complete o código
import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(5.5, 3.5), layout="constrained")

for row in range(2):
    for col in range(2):
        axs[row, col].annotate(f'axs[{row}, {col}]', (0.5, 0.5),
                               transform=axs[row, col].transAxes,
                               ha='center', va='center', fontsize=18,
                               color='darkgrey')

fig.suptitle('plt.subplots()')

7. Observe os espaços sublinhados e complete o código.

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

x = np.linspace(-2 * np.pi, 2 * np.pi, 100)
y = np.sin(x)

fig, ax = plt.subplots()
ax.plot(x, y)

8. Utilizando pandas, como realizar a leitura de um arquivo CSV em um
DataFrame e exibir as primeiras linhas?

import pandas as pd #importa a biblioteca

df = pd.read_csv('nome_arquivo.csv') #Le o arquivo e carrega os dados

print(df.head()) #exibe as linhas

9. Utilizando pandas, como selecionar uma coluna específica e filtrar linhas
em um “DataFrame” com base em uma condição?

import pandas as pd #importa a biblioteca

df = pd.read_csv('nome_arquivo.csv') #Le o arquivo e carrega os dados

coluna = df['nome_coluna'] #seleciona a coluna

filtrar_linhas = df[df['nome_da_coluna'] > 5] #filtra as linhas

print(filtrar_linhas) #imprime o resultado do filtro

10.Utilizando pandas, como lidar com valores ausentes (NaN) em um
DataFrame?
  Podemos remover linhas com valores ausentes com o seguinte codigo:
      df = df.dropna()
  E também preencher valores ausentes com algum valor:
      df = df.fillna(0)


















